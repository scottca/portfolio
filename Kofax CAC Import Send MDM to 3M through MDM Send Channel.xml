<connector>
  <name>Send MDM to 3M through MDM Send Channel</name>
  <properties>
    <property name="DataType">Channel Writer</property>
    <property name="host">sink</property>
    <property name="synchronised">0</property>
    <property name="template">${message.encodedData}</property>
  </properties>
  <transformer>
    <steps>
      <step>
        <sequenceNumber>0</sequenceNumber>
        <name>New Step</name>
        <script>var tiffFile = Packages.org.wafoote.mirth.FileUtils($(&apos;Path&apos;));
tiffFile.copyTo(&quot;3M&quot;);

var ad = globalMap.get(&apos;Account_&apos; + $(&apos;AccountNumber&apos;));

if (ad == null) {
	var ad = Packages.org.wafoote.mirth.AccountData(1, $(&apos;AccountNumber&apos;));
	if (ad.getIpop() == &apos;I&apos;) {
		globalMap.put(&apos;Account_&apos; + $(&apos;AccountNumber&apos;), ad);
	}
}

tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;);
tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= DateUtil.getCurrentDate(&quot;yyyyMMddHHmmssSSS&quot;);
tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;] = ad.getMrNo();
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = ad.getNameLast();
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = ad.getNameFirst();
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] = ad.getNameMiddle();
tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] = ad.getDob();
tmp[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;] = ad.getSex();
tmp[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;] = ad.getRace();
tmp[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;] = ad.getMarriageCode();
tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;] = ad.getAccountNo();
tmp[&apos;PID&apos;][&apos;PID.19&apos;][&apos;PID.19.1&apos;] = ad.getSsn();
tmp[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;] = ad.getPatientClass();
tmp[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;] = ad.getAdmitDateTime();
tmp[&apos;TXA&apos;][&apos;TXA.2&apos;][&apos;TXA.2.1&apos;] = msg[&apos;row&apos;][&apos;column6&apos;].toString();
tmp[&apos;TXA&apos;][&apos;TXA.2&apos;][&apos;TXA.2.2&apos;] = channelMap.get(&apos;docDesc&apos;);
tmp[&apos;TXA&apos;][&apos;TXA.12&apos;][&apos;TXA.12.1&apos;] = UUIDGenerator.getUUID();
tmp[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;] = $(&apos;fileName&apos;);
tmp[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.2&apos;] = &apos;&amp;FILE://3mappsrvtest/Kofax/&apos;;
tmp[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.3&apos;] = &apos;TIF&apos;;
tmp[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.4&apos;] = &apos;TIF&apos;;</script>
        <type>JavaScript</type>
        <data class="map">
          <entry>
            <string>Script</string>
            <string>var tiffFile = Packages.org.wafoote.mirth.FileUtils($(&apos;Path&apos;));
tiffFile.copyTo(&quot;3M&quot;);

var ad = globalMap.get(&apos;Account_&apos; + $(&apos;AccountNumber&apos;));

if (ad == null) {
	var ad = Packages.org.wafoote.mirth.AccountData(1, $(&apos;AccountNumber&apos;));
	if (ad.getIpop() == &apos;I&apos;) {
		globalMap.put(&apos;Account_&apos; + $(&apos;AccountNumber&apos;), ad);
	}
}

tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;);
tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= DateUtil.getCurrentDate(&quot;yyyyMMddHHmmssSSS&quot;);
tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;] = ad.getMrNo();
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = ad.getNameLast();
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = ad.getNameFirst();
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] = ad.getNameMiddle();
tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] = ad.getDob();
tmp[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;] = ad.getSex();
tmp[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;] = ad.getRace();
tmp[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;] = ad.getMarriageCode();
tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;] = ad.getAccountNo();
tmp[&apos;PID&apos;][&apos;PID.19&apos;][&apos;PID.19.1&apos;] = ad.getSsn();
tmp[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;] = ad.getPatientClass();
tmp[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;] = ad.getAdmitDateTime();
tmp[&apos;TXA&apos;][&apos;TXA.2&apos;][&apos;TXA.2.1&apos;] = msg[&apos;row&apos;][&apos;column6&apos;].toString();
tmp[&apos;TXA&apos;][&apos;TXA.2&apos;][&apos;TXA.2.2&apos;] = channelMap.get(&apos;docDesc&apos;);
tmp[&apos;TXA&apos;][&apos;TXA.12&apos;][&apos;TXA.12.1&apos;] = UUIDGenerator.getUUID();
tmp[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;] = $(&apos;fileName&apos;);
tmp[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.2&apos;] = &apos;&amp;FILE://3mappsrvtest/Kofax/&apos;;
tmp[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.3&apos;] = &apos;TIF&apos;;
tmp[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.4&apos;] = &apos;TIF&apos;;</string>
          </entry>
        </data>
      </step>
    </steps>
    <inboundTemplate encoding="base64">PGRlbGltaXRlZD4NCiAgICA8cm93Pg0KICAgICAgICA8Y29sdW1uMT5mYWNlc2hlZXQgRW5jb3Vu
dGVyPC9jb2x1bW4xPg0KICAgICAgICA8Y29sdW1uMj5mYWNlc2hlZXQgRW5jb3VudGVyPC9jb2x1
bW4yPg0KICAgICAgICA8Y29sdW1uMz5BY2NvdW50Tm88L2NvbHVtbjM+DQogICAgICAgIDxjb2x1
bW40PjEwMTMwMzEyPC9jb2x1bW40Pg0KICAgICAgICA8Y29sdW1uNT5Eb2NUeXBlPC9jb2x1bW41
Pg0KICAgICAgICA8Y29sdW1uNj5GUzwvY29sdW1uNj4NCiAgICAgICAgPGNvbHVtbjc+VXNlcklE
PC9jb2x1bW43Pg0KICAgICAgICA8Y29sdW1uOD5XQUZPT1RFXGJhcm5ldHNoPC9jb2x1bW44Pg0K
ICAgICAgICA8Y29sdW1uOT5cXEtPRkFYU1JWMlxDYXB0dXJlU1ZcRXhwb3J0XDAwMDlFNzlGLlRJ
RjwvY29sdW1uOT4NCiAgICA8L3Jvdz4NCjwvZGVsaW1pdGVkPg0K</inboundTemplate>
    <outboundTemplate encoding="base64">TVNIfF5+JCZ8S09GQVh8fDNNQ0FDfHx5eXl5bW1kZGhobW1zc3x8TURNXlQwMnx5eXltbWRkaGht
bXNzbW1tfHx8fHx8fHx8ClBJRHx8fDM0OTQyfHxsYXN0XmZpcnN0Xm1pZGRsZXx8eXl5eW1tZGR8
Rnx8V3x8fHx8fHx8MTAxMDk3MDR8OTk5LTk5LTk5OTl8fHx8fHx8fApQVjF8MXxJfHx8fHx8fHx8
fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8ClRYQXx8fHx8fHx8fHx8fHx8
fHx8fHx8fHx8fHx8Ck9CWHwxfFJQfFNJfHx8fHx8fHx8fHx8fHw=</outboundTemplate>
    <inboundProtocol>XML</inboundProtocol>
    <outboundProtocol>HL7V2</outboundProtocol>
    <inboundProperties>
      <property name="stripNamespaces">true</property>
    </inboundProperties>
    <outboundProperties>
      <property name="convertLFtoCR">true</property>
      <property name="handleRepetitions">false</property>
      <property name="handleSubcomponents">false</property>
      <property name="stripNamespaces">true</property>
      <property name="useStrictParser">false</property>
      <property name="useStrictValidation">false</property>
    </outboundProperties>
  </transformer>
  <filter>
    <rules>
      <rule>
        <sequenceNumber>0</sequenceNumber>
        <name>Only send documents in CAC subsets</name>
        <data class="map">
          <entry>
            <string>Script</string>
            <string>var docType = $(&apos;DocType&apos;)
var docDesc = globalMap.get(&apos;CAC_DocType_&apos; + docType);
logger.error(&quot;Doc Type: &quot; + docType);
logger.error(&quot;Description: &quot; + docDesc);
if (docDesc == null) {
	return false;
} else {
	channelMap.put(&apos;docDesc&apos;,docDesc);
	return true;
}</string>
          </entry>
        </data>
        <type>JavaScript</type>
        <script>var docType = $(&apos;DocType&apos;)
var docDesc = globalMap.get(&apos;CAC_DocType_&apos; + docType);
logger.error(&quot;Doc Type: &quot; + docType);
logger.error(&quot;Description: &quot; + docDesc);
if (docDesc == null) {
	return false;
} else {
	channelMap.put(&apos;docDesc&apos;,docDesc);
	return true;
}</script>
        <operator>NONE</operator>
      </rule>
    </rules>
  </filter>
  <transportName>Channel Writer</transportName>
  <mode>DESTINATION</mode>
  <enabled>true</enabled>
  <version>2.1.1.5490</version>
</connector>